
RT = 3 days
AT = 3 hours

// Order of execution
// Initial render by root layout (Update AT & sessionState) => Any protected routes

// sessionState {userName, cart, lang}
// Root layout updates sessionState immediately during the initial render.
// After initial render, sessionState will last as long as the session lasts.
// In case of very long session (> 3 hours), AT can expired first.

// Guest
// No RT means this user is a guest.
// Guest is immediately redirected on any protected routes.

// CASE 1 : (!rt) => Guest. Redirect immediately.
// CASE 2-1 : (rt&&!at) => AT from initial render has expired due to very long session.
// CASE 2-2 : (rt&&at) => AT from initial render is still alive in this session.


//Protected routes
// account/items
// account/orders
// account/security
// account/settings
// account/wishlist

//Wishlist
// A wishlist can hold 20 items max.
// A user can have 5 wishlists max.
// Each wishlist can be renamed. 
// Each wishlist can be navigated by /account/wishlist/my-wishlist
// Search operation in the user browser and not in the database.
// Join wishlist table and product table for a complete wishlist data.
// list_data column in the wishlist table is JSONB.


// Protected route behaviour
// What we want :
// As soon as the AT disappears from the cookie, we want to either use RT or redirect.
// In an edge case, a user can hover over a link (prefetch), wait 3 hours and navigate to that same link. 
// Here, we want the AT check to happen at the time of navigation. Prefetch is irrelevant.




The advantage of useVisibleTask
// We can trigger the AT check on navigation.

// useTask behaviour
// useTask in the layout DOES NOT RUN on every navigation, if the navigation is within the layout's route.
// e.g. navigating '/account/' => '/account/items' does not trigger useTask.
// To make sure that the above navigation triggers useTask, useTask has to be declared on each route.


// Strange reload behaviour
// Prefetch won't happen on the route that reload was performed.
// e.g. If page-reload was perfomed on /a/ , hovering over on /a/ from /b/ won't trigger a prefetch.




//Partial Unique Index and Unique Index

This is an example of creating a table with unique index. (NOT "partial" unique index.)

CREATE TABLE wishlist (
    id SERIAL PRIMARY KEY,
    ref_user_id INT NOT NULL,
    is_primary BOOLEAN DEFAULT FALSE,
    CONSTRAINT uniq_primary_wishlist UNIQUE (ref_user_id, is_primary)
);

The above example not only doesn`t allow multiple "is_primary = TRUE", 
but it also doesn't allow multiple "is_primary = FALSE".

Effectively, it only allows one "is_primary = TRUE", and one "is_primary = FALSE".

This breaks the design, because we want to allow each user to have up to 5 wishlists,
where one out of which is the primary wishlist ("is_primary = TRUE") and the others be non-primary ("is_primary = FALSE").
So we need to allow up to 4 "is_primary = FALSE" coulmns, but only 1 "is_primary = TRUE".
The "partial index" exactly does this.

In order to implement "partial unique index", we have to 
1: Omit " CONSTRAINT uniq_serial_number UNIQUE (ref_user_id, serial_number)" from the above code,
2: Add the following code after the table creation:

CREATE UNIQUE INDEX idx_primary_wishlist
ON wishlist (ref_user_id)
WHERE is_primary = TRUE;

When you want to create a partial unique index, you cannot directly define it as part of the table creation process.


Final Implementation
-- Step 1: Create the table with full unique constraints
CREATE TABLE wishlists (
    id SERIAL PRIMARY KEY,
    ref_user_id INT NOT NULL REFERENCES users(id),
    serial_number INT NOT NULL ST DEFAULT 1,
    is_primary BOOLEAN DEFAULT FALSE,
    list_data JSONB NOT NULL DEFAULT '[]'::jsonb,
    created_at TIMESTAMP DEFAULT NOW(),
    list_name VARCHAR(80) DEFAULT 'My Wishlist',
    CONSTRAINT uniq_user_serial_number UNIQUE (ref_user_id, serial_number) -- Ensure unique ordering per user
);

-- Step 2: Add the partial unique index for primary wishlist logic
CREATE UNIQUE INDEX idx_primary_wishlist
ON wishlists (ref_user_id)
WHERE is_primary = TRUE;


Example shape of list_data JSONB:
[
  {"productId": "abcd0001", "comment": "Initial comment", "added_at": "2024-11-20T12:00:00Z"},
  {"productId": "abcd0002", "comment": "Another comment", "added_at": "2024-11-21T12:00:00Z"},...x20 max
]

Implement:
Frontend keyword search (requires prefetching all items from all wishlist => 100 items max.) 

A CHECK constraint ensures that the JSON array in list_data never exceeds 20 items.
ALTER TABLE wishlists
ADD CONSTRAINT chk_list_data_length CHECK (jsonb_array_length(list_data) <= 20);


WishilistItems tables??? 
one - many : A single wishlist_item belongs to a single wishlist. A single wishlist is home to many wishlist_items

id
product_cat
product_id
comment
added_at
ref_wishlist_id
ref_product_id << How do I refference one single table if it's relying on the product_cat???